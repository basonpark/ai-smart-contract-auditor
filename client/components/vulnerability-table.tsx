"use client"

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { AlertTriangle, AlertCircle, Info, CheckCircle2, ExternalLink } from "lucide-react"
import { motion } from "framer-motion"
import { StaggeredList } from "@/components/animations/staggered-list"

export function VulnerabilityTable() {
  const vulnerabilities = [
    {
      id: "V-001",
      title: "Reentrancy Vulnerability",
      severity: "critical",
      description: "The contract is vulnerable to reentrancy attacks in the withdraw function.",
      location: "Token.sol:156",
      confidence: "High",
    },
    {
      id: "V-002",
      title: "Unchecked External Call",
      severity: "critical",
      description: "External call result is not checked, which could lead to silent failures.",
      location: "Token.sol:203",
      confidence: "High",
    },
    {
      id: "V-003",
      title: "Integer Overflow",
      severity: "high",
      description: "Potential integer overflow in the calculateRewards function.",
      location: "Staking.sol:87",
      confidence: "Medium",
    },
    {
      id: "V-004",
      title: "Unprotected Function",
      severity: "high",
      description: "The setFeeRecipient function lacks access control.",
      location: "Token.sol:245",
      confidence: "High",
    },
    {
      id: "V-005",
      title: "Timestamp Dependence",
      severity: "high",
      description: "Contract relies on block.timestamp for critical operations.",
      location: "Staking.sol:112",
      confidence: "Medium",
    },
    {
      id: "V-006",
      title: "Missing Zero Address Check",
      severity: "medium",
      description: "No zero address validation in the constructor for owner address.",
      location: "Token.sol:42",
      confidence: "High",
    },
    {
      id: "V-007",
      title: "Floating Pragma",
      severity: "low",
      description: "Contract uses a floating pragma ^0.8.0.",
      location: "Token.sol:1",
      confidence: "High",
    },
  ]

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertTriangle className="h-4 w-4 text-destructive" />
      case "high":
        return <AlertCircle className="h-4 w-4 text-orange-500" />
      case "medium":
        return <Info className="h-4 w-4 text-yellow-500" />
      case "low":
        return <CheckCircle2 className="h-4 w-4 text-green-500" />
      default:
        return null
    }
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <Badge variant="destructive">Critical</Badge>
      case "high":
        return <Badge className="bg-orange-500">High</Badge>
      case "medium":
        return <Badge className="bg-yellow-500">Medium</Badge>
      case "low":
        return <Badge className="bg-green-500">Low</Badge>
      default:
        return null
    }
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead className="w-[100px]">ID</TableHead>
          <TableHead>Vulnerability</TableHead>
          <TableHead className="w-[120px]">Severity</TableHead>
          <TableHead className="w-[120px]">Location</TableHead>
          <TableHead className="w-[100px]">Confidence</TableHead>
          <TableHead className="w-[100px]">Details</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        <StaggeredList delay={0.1} staggerDelay={0.05}>
          {vulnerabilities.map((vuln) => (
            <TableRow key={vuln.id} className="group">
              <TableCell className="font-mono">{vuln.id}</TableCell>
              <TableCell>
                <div className="flex items-start gap-2">
                  {getSeverityIcon(vuln.severity)}
                  <div>
                    <p className="font-medium">{vuln.title}</p>
                    <p className="text-sm text-muted-foreground">{vuln.description}</p>
                  </div>
                </div>
              </TableCell>
              <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
              <TableCell className="font-mono text-xs">{vuln.location}</TableCell>
              <TableCell>{vuln.confidence}</TableCell>
              <TableCell>
                <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.9 }}>
                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                    <ExternalLink className="h-4 w-4" />
                    <span className="sr-only">View Details</span>
                  </Button>
                </motion.div>
              </TableCell>
            </TableRow>
          ))}
        </StaggeredList>
      </TableBody>
    </Table>
  )
}
